ahn <- AHNnD(Sigma, 4, 0.01, 2000)
typeof(Yi)
class(Yi)
class(Yapprox)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::revdep_check()
lala <- readRDS(revdeo/checks.rds)
lala <- readRDS(revdep/checks.rds)
getwd()
?readRDS
lala <- readRDS("revdep/checks.rds")
lala
devtools::build_win()
devtools::build_win()
devtools::release()
install.packages(c("curl", "devtools", "git2r", "httr", "withr"))
install.packages(c("curl", "devtools", "git2r", "httr", "withr"))
library(ahnr)
devtools::release()
devtools::release()
library(ahnr)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 500)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
summary(ahn)
plot(ahn)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'output')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
summary(ahn)
plot(ahn)
library(ahnr)
# Create data
set.seed(12321
x <- 2 * runif(1000) - 1;
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
summary(ahn)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'output')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
library(ahnr)
devtools::release()
library(ahnr)
devtools::release()
library(installr)
devtools::release()
devtools::release()
devtools::build_win()
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::build_win()
devtools::build_win()
install.packages(c("curl", "httr"))
library(ahnr)
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::release()
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=3, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=3, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty = 2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
summary(ahn)
plot(ahn)
plot(ahn)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
summary(ahn)
plot(ahn)
plot(ahn)
matrixcalc::vandermonde.matrix(2,2)
install.packages("matrixcalc")
matrixcalc::vandermonde.matrix(2,2)
matrixcalc::vandermonde.matrix(2,5)
Phi <- matrix(0, nrow = q, ncol = N * (h+1))
N = 5
N <- 5
Phi <- matrix(0, nrow = q, ncol = N * (h+1))
h <- 2
Phi <- matrix(0, nrow = q, ncol = N * (h+1))
q <- 3
Phi <- matrix(0, nrow = q, ncol = N * (h+1))
Phi
# CH_X creates the Vandermonde matrix
CH_X <- function(X, h) {
N <- ncol(X)
q <- nrow(X)
Phi <- matrix(0, nrow = q)#, ncol = N * (h+1))
for (i in seq_len(N)) {
Phi <- cbind(Phi, matrixcalc::vandermonde.matrix(X[ , i], h+1))
}
Phi <- Phi[ , -1]
Phi
}
X <- matrix(1:4, nrow = 2)
X
CH_X(X, 2)
matrix(0, nrow = 2, ncol = N * (2+1))
matrix(0, nrow = 2, ncol = 2 * (2+1))
matrixcalc::vandermonde.matrix(2,5)
(1:3)2
(1:3)*2
(1:3)*2 + (1-1)*3
(1:3) + (1-1)*3
(1:3) + (2-1)*3
(1:3) + (3-1)*3
CH_X(X, 2)
# CH_X creates the Vandermonde matrix
CH_X <- function(X, h) {
N <- ncol(X)
q <- nrow(X)
Phi <- matrix(0, nrow = q, ncol = N * (h+1))
for (i in seq_len(N)) {
#Phi <- cbind(Phi, matrixcalc::vandermonde.matrix(X[ , i], h+1))
Phi[ , (1:(h+1)) + (i-1)*(h+1)] <- matrixcalc::vandermonde.matrix(X[ , i], h+1)
}
#Phi <- Phi[ , -1]
Phi
}
CH_X(X, 2)
install.packages(c("pracma", "pdist", "visNetwork"))
library(ahnr)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
len(Sigma)
dim(Sigma)
length(Sigma)
typeof(Sigma$X)
typeof(Sigma$Y)
Sigma$X
class(Sigma$X)
is.data.frame(Sigma$X)
devtools::document()
library(ahnr)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ahnr)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- fit(Sigma, 4, 0.01, 2000)
library(ahnr)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- fit(Sigma, 4, 0.01, 2000)
summary(ahn)
plot(ahn)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- predict(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty = 2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- predict.ahn(ahn, X)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- predict(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty = 2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
summary(ahn)
plot(ahn)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- fit(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- predict(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
summary(ahn)
plot(ahn)
library(ahnr)
devtools::document()
devtools::document()
library(ahnr)
devtools::document()
library(ahnr)
devtools::document()
library(ahnr)
?summary.ahn
devtools::document()
?summary.ahn
devtools::document()
?summary.ahn
devtools::document()
?summary.ahn
devtools::document()
?plot.ahn
?predict.ahn
devtools::document()
?plot.ahn
devtools::document()
?plot.ahn
devtools::document()
library(ahnr)
?plot.ahn
devtools::document()
?plot.ahn
devtools::document()
library(ahnr)
devtools::document()
library(ahnr)
devtools::build_win()
devtools::document()
library(ahnr)
?summary.ahn
devtools::build_win()
install.packages("devtools")
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
install.packages("matrixcalc")
install.packages("pracma")
install.packages("pdist")
install.packages("visNetwork")
library(ahnr)
devtools::build_win()
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- fit(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- predict(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty = 2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
summary(ahn)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- fit(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- predict(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty = 2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
summary(ahn)
plot(ahn)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- fit(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- predict(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
summary(ahn)
plot(ahn)
