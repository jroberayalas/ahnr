?plot
?legend
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(seq_along(ysim), ysim, col = 'red')
legend(c('Original', 'Simulation'))
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(seq_along(ysim), ysim, col = 'red')
legend(11, -0.5, c('Original', 'Simulation'))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.5)
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.7)
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
summary(ahn)
plot(ahn)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = '')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'output')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
summary(ahn)
plot(ahn)
library(ahnr)
devtools::build_win()
library(ggplot2)
library(caret)
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = TRUE
)
)
# Print model to console
model
model$modelInfo
model$results
model$pred
model$resampledCM
model$resample
model$control
model$control
model$finalModel
model$method
model$bestTune
model$control$returnResamp
model$control$search
model$results
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 10, repeats = 5,
verboseIter = TRUE
)
)
# Print model to console
model
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 5, repeats = 5,
verboseIter = TRUE
)
)
# Print model to console
model
model$results
model$pred
model
plot(model)
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 5, repeats = 5,
verboseIter = TRUE, returnResamp = 'all'
)
)
# Print model to console
model
model$resample
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 5, repeats = 5,
verboseIter = TRUE
)
)
# Print model to console
model
model$resample
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 5,
verboseIter = TRUE
)
)
# Print model to console
model
model$resample
model
mean(model$resample$RMSE)
sd(model$resample$RMSE)
model$results
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 5, repeats = 5,
verboseIter = TRUE
)
)
# Print model to console
model
model$resample
model$resampledCM
# Fit lm model using 10-fold CV: model
model <- train(
price ~ ., diamonds,
method = "lm",
trControl = trainControl(
method = "cv", number = 5, repeats = 5,
verboseIter = TRUE, returnResamp = 'all'
)
)
# Print model to console
model
model$resample
model$method
model$results
model$resample
model$control$repeats
model$control$returnResamp
model$repeats
model$metric
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
typeof(Yi)
class(Yi)
class(Yapprox)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::revdep_check()
lala <- readRDS(revdeo/checks.rds)
lala <- readRDS(revdep/checks.rds)
getwd()
?readRDS
lala <- readRDS("revdep/checks.rds")
lala
devtools::build_win()
devtools::build_win()
devtools::release()
install.packages(c("curl", "devtools", "git2r", "httr", "withr"))
install.packages(c("curl", "devtools", "git2r", "httr", "withr"))
library(ahnr)
devtools::release()
devtools::release()
library(ahnr)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 500)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
summary(ahn)
plot(ahn)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'output')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
summary(ahn)
plot(ahn)
library(ahnr)
# Create data
set.seed(12321
x <- 2 * runif(1000) - 1;
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
summary(ahn)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'output')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
library(ahnr)
devtools::release()
library(ahnr)
devtools::release()
library(installr)
devtools::release()
devtools::release()
devtools::build_win()
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::build_win()
devtools::build_win()
install.packages(c("curl", "httr"))
library(ahnr)
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::release()
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=3, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=3, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty=2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', lty = 2, col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
summary(ahn)
plot(ahn)
plot(ahn)
# Create data
set.seed(12321)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'y')
lines(t, ysim, type = 'l', lty = 2, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.6)
summary(ahn)
plot(ahn)
plot(ahn)
